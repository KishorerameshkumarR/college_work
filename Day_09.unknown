Day 09


<!DOCTYPE html>
<html lang="en">
<head>
   
    <title>MongoDB CRUD</title>
</head>
<body>
    <h1>MongoDB CRUD Example</h1>

    {{#if edit_id}}
    <h3>Edit form</h3>
    <form action = '/updateinfo/{{edit_id}}' method = 'POST'>
    <label for "">EMP ID</label>
    <input type="text" name="eid" value = "{{edit_emp.empid}}">
    <br><br>
    <label for "">EMP NAME</label>
    <input type="text" name="ename" value = "{{edit_emp.empname}}">
    <input type = "submit">
    </form>


    {{else}}
    <h3>Create Form</h3>
    <form action = '/empinfo' method = 'POST'>
    <label for "">EMP ID</label>
    <input type="text" name="eid">
    <br><br>
    <label for "">EMP NAME</label>
    <input type="text" name="ename">
    <input type = "submit">
    </form>
    <br><br>
    {{/if}}

    <ul>
    {{#each datas}}
    <li>
        {{this.empid}} {{this.empname}}  
        <a href="/?edit_man={{this._id}}">Edit</a> 
        <a href="/?delete_man={{this._id}}" onclick="return confirm('Are you sure you want to delete this record?')">Delete</a>
    </li>
    {{/each}}
</ul>

    <p>This is the message from the server {{ msg }}</p>
    
</body>
</html>


-----------------------------------------------------------------------
|
| npm i --s express express-handlebars body-parser
| npm i -g  nodemon
| npx nodemon app.js



__________________________________________________________________________________




create a new folder and in that create a cmd

1)Express 
	Purpose : Express is tha fast, minimalist web framework for node.js. It provides tools to build web applications ans API's 
	Usage:
	To handle HTTP requests ans responses
	To create routes for different endpoints ( e.g.., GET,POST,PUT,DELETE)


2)Express-handlebars
	purpose:
		This package is an exoress.js engine fir rendering dynamic HTML pages using Handlerbars syntax;
	usage:
	    To create dynamic contennt by combinning HTML with javascript data
	    To create reusable components like headers,footers etc using HandleBar partials


3)body-parser
	purpose:
		Body parser is a middleware that parses incoming request bodies in a middleware before your handlers,making requests data accessible in req.body
	Usage:
		to parse JSON data from the request body
		to parse URL-encoded data from forms

---------------------------------------------------------------------------------------


app.js
----------
const express = require('express');
const bodyParser = require('body-parser');
const exhbs = require('express-handlebars');

/* Create an instance of express */
const app = express();


//this tells about what kind of data and how the data is sent to the server
/*
first parameter is the type of data you want to send
second parameter is the middleware function
in that tells where the html file is located about like what folder and name of the file and extension of the file is mentioned as 'hbs

*/
app.engine('hbs',
    exhbs.engine({
        layoutsDir:'viewsfold',
        defaultLayout:'maincopy',
        extname:'hbs'}));


app.set('view engine', 'hbs');
app.set('views', 'viewsfold');



app.get('/', (req, res) => {
    const msg = 'test'
    res.render('main', { msg });
})


app.listen(8000, () =>{
    console.log('Listening on port 8000...');
    for(let i=0; i<5; i++){
        console.log('Server is running...');
    }
})






----------------------------------------------------------------------------
main.hbs
<!DOCTYPE html>
<html lang="en">
<head>
   
    <title>MongoDB CRUD</title>
</head>
<body>
    <h1>MongoDB CRUD Example</h1>
    <p>This is the message from the server {{msg}}</p>
    
</body>
</html>

===========================================================
db.js
const mongodb = require('mongodb');
const mongoClient = mongodb.MongoClient;

{/* import {MongoClient} from 'mongodb'; */}

const url = 'mongodb://localhost:27017';
let database;

function getDatabase(){
    const client = mongoClient.connect(url);

    database = client.db('t1');
    if(database){
        console.log('Connected to database');
    }
    else{
        console.error('Database connection failed');
    }

    return database;

}

module.exports = {getDatabase};
==============================================================

